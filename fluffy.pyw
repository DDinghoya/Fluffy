#! /usr/bin/env python3
"""""
"Pink Donut" design was designed by fourminute exclusively for 
Fluffy and does not infringe on any copyright.

Copyright (c) 2019 fourminute (https://github.com/fourminute)

Fluffy is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Fluffy is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""""
# Imports
import signal
import time
import socket
import base64
import os
import sys
import threading
import struct
import requests
from binascii import hexlify as hx, unhexlify as uhx
import logging
LOG_FILENAME = 'fluffy.log'
logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG)
try:
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    from SocketServer import TCPServer
    from urllib import quote
except ImportError:
    from http.server import SimpleHTTPRequestHandler
    from socketserver import TCPServer
    from urllib.parse import quote
try:
    from PyQt5 import QtWidgets
    from PyQt5.QtCore import Qt, QThread
    from PyQt5.QtWidgets import *
    from PyQt5.QtGui import QIcon, QPixmap, QColor
    app = QtWidgets.QApplication(sys.argv)
    window = QWidget()
except Exception as e:
    logging.error(e, exc_info=True)
    exit()
try:
    import usb.core
    import usb.util
    usb_success = True
except:
    usb_success = False
    pass

# Variables
VERSION = "2.3.0"
GREEN = "QLabel {color: #09A603;}"
BLUE = "QLabel {color: #00A2FF;}"
RED = "QLabel {color: #cc2249;}"
PURPLE = "QLabel {color: #7F0CE8;}"
CMD_ID_EXIT = 0
CMD_ID_FILE_RANGE = 1
CMD_TYPE_RESPONSE = 1
transfer_rate = 0
is_installing = False
is_done = False
is_network = False
is_goldleaf = False
is_exiting = False 
selected_dir = None
selected_files = None
sent_header = False
cur_nca_name = "NA"
start_time = time.time()
cur_transfer_rate = 0
last_transfer_rate = 0
cur_progress = 0
end_progress = 0
cur_nsp_count = 1
total_nsp = 0
cur_nsp_name = "NA"
max_nca_count = 0
cur_nca_count = 1
initial_dir = os.getcwd()
switch_ip = "0.0.0.0"
host_ip = "0.0.0.0"
if os.path.isfile(initial_dir + '/fluffy_config.py'):
    try:
        import fluffy_config
        switch_ip = fluffy_config.switch_ip
    except:
        switch_ip = "0.0.0.0"
        pass
else:
    switch_ip = "0.0.0.0"
gold_in = None
gold_out = None
net_port = 2000 #Unused, saved for future reference (Ie. Goldleaf Network)
ICON_DATA = ""
DONUT_DATA = ""
class TransferRates:
    Safe = 0x1F4
    Normal = 0x100000
TransferRateDict  = {0: TransferRates.Safe,
                     1: TransferRates.Normal}

# Setters
def set_nca_name(v):
    global cur_nca_name
    cur_nca_name = v
    
def check_for_update():
    url = "https://raw.githubusercontent.com/fourminute/Fluffy/master/version"
    r = requests.get(url)
    return VERSION in r.content.decode()

def set_start_time():
    global start_time
    start_time = time.time()
    
def set_cur_transfer_rate(v):
    global cur_transfer_rate
    cur_transfer_rate = v

def set_sent_header():
    global sent_header
    sent_header = True

def set_last_transfer_rate(v):
    global last_transfer_rate
    last_transfer_rate = v

def close_program():
    global is_exiting
    if is_network and sent_header:
        with open(initial_dir + '/fluffy_config.py', 'w') as w:
            w.write('switch_ip = \"' + str(switch_ip) + "\"")
    is_exiting = True
    sys.exit()
                
def set_transfer_rate(v):
    global transfer_rate
    transfer_rate = TransferRateDict[v]

def set_dir(d):
    global selected_dir
    selected_dir = d
   
def set_selected_files(f):
    global selected_files
    selected_files = f
    
def set_progress(c, e):
    global cur_progress
    global end_progress
    end_progress = e
    cur_progress = c

def set_cur_nsp(nsp):
    global cur_nsp_name
    global cur_nsp_count
    if cur_nsp_name != nsp:
        if cur_nsp_name == "NA":
            cur_nsp_name = nsp
        else:
            cur_nsp_count += 1
            cur_nsp_name = nsp
            set_start_time()
            last_progress = 0

def set_total_nsp(n):
    global total_nsp
    total_nsp = n
    
def complete_install():
    global is_done
    is_done = True
    
def complete_loading():
    global is_installing
    is_installing = True

def set_network(v):
    global is_network
    is_network = v
    
def set_ip(v, n):
    global switch_ip
    global host_ip
    if n == 0:
        switch_ip = v
    else:
        host_ip = v
    
def set_port(v):
    global net_port
    net_port = int(v)

def set_nca_count(c, m):
    global cur_nca_count
    global max_nca_count
    cur_nca_count = c
    max_nca_count = m
    
def set_goldleaf(v):
    global is_goldleaf
    is_goldleaf = v
    




# PFS0 & Goldleaf by fourminute.
class PFS0:
    magic            = None
    total_files      = None
    string_table     = None
    header_remainder = None
    body_length      = None
    file_array       = []
    f                = None
    file_names       = []
    
    @staticmethod
    def open(fn):
        PFS0.f = open(fn, 'rb')
        PFS0.f.seek(0)
        PFS0.magic = PFS0.f.read(4).decode()
        if PFS0.magic != 'PFS0':
            print("PFS0 didn't check out. Possible NSP corruption.")
        PFS0.total_files      = struct.unpack("<I",PFS0.f.read(4))[0]
        PFS0.header_remainder = struct.unpack("<I",PFS0.f.read(4))[0]
        PFS0.string_table = 0x10 + 0x18 * PFS0.total_files
        PFS0.f.read(4)
        PFS0.file_array = []
        for i in range(PFS0.total_files):
            nca_offset = struct.unpack("<Q",PFS0.f.read(8))[0]
            nca_size   = struct.unpack("<Q",PFS0.f.read(8))[0]
            name_offset= struct.unpack("<I",PFS0.f.read(4))[0]
            PFS0.file_array.append((nca_offset,nca_size,name_offset))
            PFS0.f.read(4)
        PFS0.body_length = PFS0.f.tell() + PFS0.header_remainder
        for i in range(PFS0.total_files):
            PFS0.f.seek(PFS0.string_table+PFS0.file_array[i][2])
            fn = b''
            while True:
                b = PFS0.f.read(1)
                if b == b'\x00': break
                fn += b
            PFS0.file_names.append(fn.decode())    
   
    @staticmethod
    def read_chunks(index):
        global transfer_rate
        global last_transfer_rate
        chunk_size = transfer_rate
        abs_sz = int(PFS0.file_array[index][1])
        abs_off = int(PFS0.body_length+PFS0.file_array[index][0])
        PFS0.f.seek(abs_off)
        end = abs_off + abs_sz
        while True:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            to_read = end - PFS0.f.tell()
            if to_read < chunk_size:
                yield PFS0.f.read(to_read)
                break
            else:
                yield PFS0.f.read(chunk_size)
            set_progress(int(PFS0.f.tell()), abs_sz)
            elapsed_time = time.time() - start_time
            if elapsed_time >= 1:
                set_cur_transfer_rate(int(PFS0.f.tell()) - last_transfer_rate)
                set_last_transfer_rate(int(PFS0.f.tell()))
                set_start_time()
   
    @staticmethod
    def read_nca(index):
        PFS0.f.seek(PFS0.body_length+PFS0.file_array[index][0])
        return PFS0.f.read(PFS0.file_array[index][1])
        
        
            
class CommandId:
    ConnectionRequest = 0
    ConnectionResponse= 1
    NSPName=            2
    Start=              3
    NSPData=            4
    NSPContent=         5
    NSPTicket=          6
    Finish=             7
  
class Goldleaf:
    GLUC         = 0x43554c47
    magic        = 0x43554c47
    ticket_index = 0
    cmd_id       = 0
    started      = False

    @staticmethod
    def write(buffer):
        gold_out.write(buffer)

    @staticmethod
    def magic_ok():
        return Goldleaf.GLUC == Goldleaf.magic
    
    @staticmethod
    def is_id(a_cmd):
        return a_cmd == Goldleaf.cmd_id
    
    @staticmethod
    def read(length):
        return gold_in.read(length).tobytes()
    
    @staticmethod
    def read_cmd(data):
        Goldleaf.magic,Goldleaf.cmd_id = struct.unpack("<II",data)        

    @staticmethod
    def write_cmd(a_cmd):
        packed = struct.pack("<II",Goldleaf.magic,a_cmd)
        gold_out.write(bytes(packed))
    
    @staticmethod
    def Goldleaf_USB(nsp_path):
        Goldleaf.write_cmd(CommandId.ConnectionRequest)
        while True:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            try:
                
                Goldleaf.read_cmd(Goldleaf.read(8))
                
                if Goldleaf.is_id(CommandId.ConnectionResponse) and Goldleaf.magic_ok():
                    Goldleaf.write_cmd(CommandId.NSPName)
                    base_name = os.path.basename(nsp_path)
                    Goldleaf.write(struct.pack("<I",len(base_name)))
                    Goldleaf.write(base_name.encode())
                
                elif Goldleaf.is_id(CommandId.Start) and Goldleaf.magic_ok():
                    Goldleaf.write_cmd(CommandId.NSPData)
                    PFS0.open(nsp_path)
                    Goldleaf.write(struct.pack("<I",len(PFS0.file_array)))
                    for i in range(len(PFS0.file_array)):
                        Goldleaf.write(struct.pack("<I",len(PFS0.file_names[i])))
                        Goldleaf.write(PFS0.file_names[i].encode())
                        Goldleaf.write(struct.pack("<Q",PFS0.body_length+PFS0.file_array[i][0]))
                        Goldleaf.write(struct.pack("<Q",PFS0.file_array[i][1]))
                        if '.tik' in PFS0.file_names[i].lower():
                            Goldleaf.ticket_index = i
                    complete_loading()

                elif Goldleaf.is_id(CommandId.NSPContent) and Goldleaf.magic_ok():
                    index = struct.unpack("<I", Goldleaf.read(4))[0]
                    try:
                        set_nca_name(PFS0.file_names[index])
                        set_nca_count(index+1, len(PFS0.file_array))
                    except:
                        pass
                    for buffer in PFS0.read_chunks(index):
                        while True:
                            if is_exiting:
                                pid = os.getpid()
                                os.kill(pid, signal.SIGTERM)
                            try:
                                Goldleaf.write(buffer)
                                break
                            except:
                                pass

                elif Goldleaf.is_id(CommandId.NSPTicket) and Goldleaf.magic_ok():
                    Goldleaf.write(PFS0.read_nca(Goldleaf.ticket_index))
 

                elif Goldleaf.is_id(CommandId.Finish) and Goldleaf.magic_ok():
                    set_progress(100,100)
                    complete_install()
                    while True:
                        if is_exiting:
                            pid = os.getpid()
                            os.kill(pid, signal.SIGTERM)
            except Exception as e:
                print(str(e))
                pass
        return 0

def init_goldleaf_usb_install():
    global gold_in
    global gold_out
    for file in selected_files:
        try:
            dev = usb.core.find(idVendor=0x057E, idProduct=0x3000)
            dev.reset()
            dev.set_configuration()
            cfg = dev.get_active_configuration()
            is_out_ep = lambda ep: usb.util.endpoint_direction(ep.bEndpointAddress) == usb.util.ENDPOINT_OUT
            is_in_ep = lambda ep: usb.util.endpoint_direction(ep.bEndpointAddress) == usb.util.ENDPOINT_IN
            gold_out = usb.util.find_descriptor(cfg[(0,0)], custom_match=is_out_ep)
            gold_in = usb.util.find_descriptor(cfg[(0,0)], custom_match=is_in_ep)
            assert gold_out is not None
            assert gold_in is not None
            set_cur_nsp(os.path.basename(file))
            Goldleaf.Goldleaf_USB(str(file))
        except Exception as e:
            logging.error(e, exc_info=True)
            exit()
        usb.util.dispose_resources(dev)
        dev.reset()

# Tinfoil Network
class RangeHTTPRequestHandler(SimpleHTTPRequestHandler):
    def send_head(self):
        path = self.translate_path(self.path)
        ctype = self.guess_type(path)
        if os.path.isdir(path):
            return SimpleHTTPRequestHandler.send_head(self)
        if not os.path.exists(path):
            return self.send_error(404, self.responses.get(404)[0])
        f = open(path, 'rb')
        fs = os.fstat(f.fileno())
        size = fs[6]
        start, end = 0, size - 1
        if 'Range' in self.headers:
            start, end = self.headers.get('Range').strip().strip('bytes=')\
                .split('-')
        if start == "":
            try:
                end = int(end)
            except ValueError as e:
                self.send_error(400, 'invalid range')
            start = size - end
        else:
            try:
                start = int(start)
            except ValueError as e:
                self.send_error(400, 'invalid range')
            if start >= size:
                self.send_error(416, self.responses.get(416)[0])
            if end == "":
                end = size - 1
            else:
                try:
                    end = int(end)
                except ValueError as e:
                    self.send_error(400, 'invalid range')

        start = max(start, 0)
        end = min(end, size - 1)
        self.range = (start, end)
        cont_length = end - start + 1
        if 'Range' in self.headers:
            self.send_response(206)
        else:
            self.send_response(200)
        self.send_header('Content-type', ctype)
        self.send_header('Accept-Ranges', 'bytes')
        self.send_header('Content-Range',
                         'bytes %s-%s/%s' % (start, end, size))
        self.send_header('Content-Length', str(cont_length))
        self.send_header('Last-Modified', self.date_time_string(fs.st_mtime))
        self.end_headers()

        return f

    def copyfile(self, infile, outfile):
        if 'Range' not in self.headers:
            SimpleHTTPRequestHandler.copyfile(self, infile, outfile)
            return
        set_cur_nsp(str(os.path.basename(infile.name)))
        start, end = self.range
        infile.seek(start)
        bufsize = 64 * 1024  # 64KB
        while True:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            buf = infile.read(bufsize)
            if not buf:
                break
            try:
                outfile.write(buf)
                try:
                    set_progress(int(infile.tell()), int(end))
                    elapsed_time = time.time() - start_time
                    if elapsed_time >= 1:
                        set_cur_transfer_rate(int(infile.tell()) - last_transfer_rate)
                        set_last_transfer_rate(int(infile.tell()))
                        set_start_time()
                except:
                    pass
            except BrokenPipeError:
                pass
            
class MyServer(TCPServer):
    stopped = False
    def server_bind(self):
        import socket
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(self.server_address)
    def serve_forever(self):
        while not self.stopped:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            self.handle_request()             
    def force_stop(self):
        self.server_close()
        self.stopped = True
        
def init_tinfoil_net_install():
    accepted_extension = ('.nsp')
    hostPort = 2000
    target_ip = switch_ip
    hostIp = host_ip
    target_path = str(selected_dir).strip()
    baseUrl = hostIp + ':' + str(hostPort) + '/'
    directory = target_path
    file_list_payload = ''  
    for file in [file for file in next(os.walk(target_path))[2] if file.endswith(accepted_extension)]:
        for y in selected_files:
            if str(file).find(os.path.basename(y)) != -1:
                file_list_payload += baseUrl + quote(file) + '\n'
    file_list_payloadBytes = file_list_payload.encode('ascii')
    if directory and directory != '.':  # doesn't need to move if it's already the current working directory
        os.chdir(directory)
    server = MyServer((host_ip, hostPort), RangeHTTPRequestHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.start()
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, 2000))
        sock.sendall(struct.pack('!L', len(file_list_payloadBytes)) + file_list_payloadBytes)
        complete_loading()
        while len(sock.recv(1)) < 1:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
        sock.close()
    except Exception as e:
        logging.error(e, exc_info=True)
        server.force_stop()
        sys.exit(1)
    server.force_stop()
    complete_install()
    while True:
        if is_exiting:
            pid = os.getpid()
            os.kill(pid, signal.SIGTERM)

# Tinfoil USB
class Tinfoil:
    @staticmethod
    def send_response_header(out_ep, cmd_id, data_size):
        out_ep.write(b'TUC0')
        out_ep.write(struct.pack('<B', CMD_TYPE_RESPONSE))
        out_ep.write(b'\x00' * 3)
        out_ep.write(struct.pack('<I', cmd_id))
        out_ep.write(struct.pack('<Q', data_size))
        out_ep.write(b'\x00' * 0xC)
        
    @staticmethod
    def file_range_cmd(nsp_dir, in_ep, out_ep, data_size):
        file_range_header = in_ep.read(0x20)
        range_size = struct.unpack('<Q', file_range_header[:8])[0]
        range_offset = struct.unpack('<Q', file_range_header[8:16])[0]
        nsp_name_len = struct.unpack('<Q', file_range_header[16:24])[0]
        nsp_name = bytes(in_ep.read(nsp_name_len)).decode('utf-8')
        set_cur_nsp(str(os.path.basename(nsp_name)))
        Tinfoil.send_response_header(out_ep, CMD_ID_FILE_RANGE, range_size)
        with open(nsp_name, 'rb') as f:
            f.seek(range_offset)
            curr_off = 0x0
            end_off = range_size
            read_size = transfer_rate
            while curr_off < end_off:
                if is_exiting:
                    pid = os.getpid()
                    os.kill(pid, signal.SIGTERM)
                if curr_off + read_size >= end_off:
                    read_size = end_off - curr_off
                    try:
                        set_progress(int(end_off), int(end_off))
                    except:
                        pass
                buf = f.read(read_size)
                out_ep.write(data=buf, timeout=0)
                curr_off += read_size
                try:
                    set_progress(int(curr_off), int(end_off))
                    elapsed_time = time.time() - start_time
                    if elapsed_time >= 1:
                        set_cur_transfer_rate(curr_off - last_transfer_rate)
                        set_last_transfer_rate(curr_off)
                        set_start_time()
                except:
                    pass
    @staticmethod
    def poll_commands(nsp_dir, in_ep, out_ep):
        while True:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            cmd_header = bytes(in_ep.read(0x20, timeout=0))
            magic = cmd_header[:4]
            if magic != b'TUC0': 
                continue
            cmd_type = struct.unpack('<B', cmd_header[4:5])[0]
            cmd_id = struct.unpack('<I', cmd_header[8:12])[0]
            data_size = struct.unpack('<Q', cmd_header[12:20])[0]
            if cmd_id == CMD_ID_EXIT:
                complete_install()
                while True:
                    if is_exiting:
                        pid = os.getpid()
                        os.kill(pid, signal.SIGTERM)
            elif cmd_id == CMD_ID_FILE_RANGE:
                Tinfoil.file_range_cmd(nsp_dir, in_ep, out_ep, data_size)
    @staticmethod
    def send_nsp_list(s_f, nsp_dir, out_ep):
        nsp_path_list = list()
        nsp_path_list_len = 0
        for nsp_path in os.listdir(nsp_dir):
            if nsp_path.endswith(".nsp"):
                for y in s_f:
                    if str(nsp_path).find(os.path.basename(y)) != -1:
                        print(str(nsp_path))
                        nsp_path_list.append(nsp_dir + "/" + nsp_path.__str__() + '\n')
                        nsp_path_list_len += len(nsp_dir + "/" + nsp_path.__str__()) + 1
        out_ep.write(b'TUL0')
        out_ep.write(struct.pack('<I', nsp_path_list_len))
        out_ep.write(b'\x00' * 0x8) 
        for nsp_path in nsp_path_list:
            out_ep.write(nsp_path)
        
def init_tinfoil_usb_install():
    nsp_dir = selected_dir
    dev = usb.core.find(idVendor=0x057E, idProduct=0x3000)
    if dev is None:
        raise ValueError('Switch is not found!')
    dev.reset()
    dev.set_configuration()
    cfg = dev.get_active_configuration()
    is_out_ep = lambda ep: usb.util.endpoint_direction(ep.bEndpointAddress) == usb.util.ENDPOINT_OUT
    is_in_ep = lambda ep: usb.util.endpoint_direction(ep.bEndpointAddress) == usb.util.ENDPOINT_IN
    out_ep = usb.util.find_descriptor(cfg[(0,0)], custom_match=is_out_ep)
    in_ep = usb.util.find_descriptor(cfg[(0,0)], custom_match=is_in_ep)
    assert out_ep is not None
    assert in_ep is not None
    Tinfoil.send_nsp_list(selected_files, nsp_dir, out_ep)
    complete_loading()
    Tinfoil.poll_commands(nsp_dir, in_ep, out_ep)


# Main
try:
    # Images
    imgdata = base64.b64decode(ICON_DATA)
    with open('icon.ico', 'wb') as f:
        f.write(imgdata)
    imgdata2 = base64.b64decode(DONUT_DATA)
    with open('inlay.png', 'wb') as f:
        f.write(imgdata2)
        
    # Widget Functions
    def send_header_cmd():
        btn_header.setEnabled(False)
        btn_nsp.setEnabled(False)
        combo.setEnabled(False)
        txt_ip.setEnabled(False)
        txt_ip2.setEnabled(False)
        net_radio.setEnabled(False)
        usb_radio.setEnabled(False)
        txt_port.setEnabled(False)
        tin_radio.setEnabled(False)
        gold_radio.setEnabled(False)
        if is_network:
            set_ip(txt_ip.text(), 0)
            set_ip(txt_ip2.text(), 1)
            set_port(txt_port.text())
            set_sent_header()
            set_start_time()
            threading.Thread(target = init_tinfoil_net_install).start()
        else:
            if is_goldleaf:
                set_transfer_rate(combo.currentIndex())
                set_sent_header()
                set_start_time()
                threading.Thread(target = init_goldleaf_usb_install).start()
            else:
                set_transfer_rate(combo.currentIndex())
                set_sent_header()
                set_start_time()
                threading.Thread(target = init_tinfoil_usb_install).start()
        
    def nsp_file_dialog():
        try:
            if not is_goldleaf:
                d = QFileDialog.getOpenFileNames(window, 'Open file', initial_dir, "NSP Files (*.nsp)")
            else:
                d = QFileDialog.getOpenFileName(window, 'Open file', initial_dir, "NSP Files (*.nsp)")
            tmp = list()
            list_nsp.clear()
            i = 0
            spl = str(d).split(',')
            fil = list()
            for a in spl:
                st = a.split("'")
                fil.append(st[1])
            fil.pop()
            for f in fil:
                i += 1
                list_nsp.addItem(os.path.basename(str(f)))
                tmp.append(str(f))
            if i > 0:
                btn_header.setEnabled(True)
                set_total_nsp(i)
                set_selected_files(tmp)
                set_dir(os.path.dirname(tmp[0]))
                l_status.setText(str(total_nsp) + " NSPs Selected.")
            else:
                btn_header.setEnabled(False)
                l_status.setText("Awaiting Selection.")
        except Exception as e:
            logging.error(e, exc_info=True)
            pass
        
    def tin_radio_cmd():
        l_status.setText("Awaiting Selection.")
        btn_nsp.setText("Select NSPs")
        l_nsp.setText("")
        txt_ip.setEnabled(False)
        txt_ip2.setEnabled(False)
        txt_port.setEnabled(False)
        net_radio.setChecked(False)
        usb_radio.setChecked(True)
        net_radio.setVisible(True)
        set_goldleaf(False)
        split_check.setEnabled(True)
        
    def gold_radio_cmd():
        l_status.setText("Awaiting Selection.")
        btn_nsp.setText("Select NSP")
        txt_ip.setEnabled(False)
        txt_ip2.setEnabled(False)
        txt_port.setEnabled(False)
        net_radio.setChecked(False)
        usb_radio.setChecked(True)
        net_radio.setVisible(False)
        set_network(False)
        set_goldleaf(True)
        split_check.setCheckState(False)
        split_check.setEnabled(False)
        list_nsp.clear()
        
    def usb_radio_cmd():
        btn_nsp.setText("Select NSPs")
        txt_ip.setEnabled(False)
        txt_ip2.setEnabled(False)
        combo.setEnabled(True)
        set_network(False)
        txt_port.setEnabled(False)
        split_check.setEnabled(True)
        
    def net_radio_cmd():
        btn_nsp.setText("Select NSPs")
        txt_ip.setEnabled(True)
        txt_ip2.setEnabled(True)
        combo.setEnabled(False)
        set_network(True)
        txt_port.setEnabled(True)
        split_check.setCheckState(False)
        split_check.setEnabled(False)
        
    def split_cmd():
        if split_check.checkState():
            btn_nsp.setText("Select Folder")
        else:
            btn_nsp.setText("NSP Selection")
            
    def set_done_text():
        l_nsp.setText("")
        l_status.setText("Successfully Installed " + str(total_nsp) + " NSPs!")
        l_switch.setText("You may close Fluffy.")
        l_switch.setStyleSheet(GREEN)
        l_status.setStyleSheet(GREEN)
        progressbar.setValue(100)

    def set_loading_text():
        l_nsp.setText("")
        l_status.setText("")
        l_switch.setText(str(total_nsp) + " NSP(s) queued for install.")
        l_switch.setStyleSheet(PURPLE)

    def set_progress_text():
        v = (int(cur_progress) / int(end_progress)) * 100
        progressbar.setValue(v)
        n_rate = round((cur_transfer_rate /1000000),2)
        if n_rate < 0:
            n_rate = 0.0
        if not is_goldleaf:
            l_status.setText("Installing " + str(cur_nsp_count) + " of " + str(total_nsp) + " NSP(s).")
        else:
            l_status.setText("Installing " + str(cur_nca_count) + " of " + str(max_nca_count) + " NCAs.")
        l_switch.setText("Transfer Rate: " + str(n_rate) + "MB/s.")
        l_switch.setStyleSheet(GREEN)
        l_status.setStyleSheet(GREEN)
        if not is_goldleaf:
            if len(cur_nsp_name) > 13:
                l_nsp.setText("Current NSP: \"" + cur_nsp_name[:13] + "...\"")
            else:
                l_nsp.setText("Current NSP: \"" + cur_nsp_name + "\"")
        else:
            if len(cur_nca_name) > 13:
                l_nsp.setText("Current NCA: \"..." + cur_nca_name[-13:] + "\"")
            else:
                l_nsp.setText("Current NCA: \"" + cur_nca_name + "\"")

    def set_switch_text():
        dev = usb.core.find(idVendor=0x057E, idProduct=0x3000)
        if dev is None:
            l_switch.setText("Switch Not Detected!")
            btn_header.setEnabled(False)
            l_switch.setStyleSheet(RED)
        else:
            l_switch.setText("Switch Detected!")
            l_switch.setStyleSheet(GREEN)
            if list_nsp.count() > 0:
                btn_header.setEnabled(True)
            else:
                btn_header.setEnabled(False)
                    
    #Init Widgets
    l_host = QtWidgets.QLabel("This Computers IP:")
    txt_ip2 = QtWidgets.QLineEdit("0.0.0.0")
    try:
        fill = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
        txt_ip2.setText(str(fill))
    except:
        pass
    l_nsp = QtWidgets.QLabel("")
    l_ip = QtWidgets.QLabel("Switch IP:")
    l_port = QtWidgets.QLabel("Port:")
    txt_ip = QtWidgets.QLineEdit("0.0.0.0")
    tin_radio = QtWidgets.QRadioButton("Adubbz/Tinfoil")
    gold_radio = QtWidgets.QRadioButton("XorTroll/Goldleaf")
    split_check = QtWidgets.QCheckBox("Use Split NSP")
    usb_radio = QtWidgets.QRadioButton("USB")
    net_radio = QtWidgets.QRadioButton("Network")
    btn_nsp = QtWidgets.QPushButton("Select NSPs")
    btn_header = QtWidgets.QPushButton("Begin Transfer")
    l_rate = QtWidgets.QLabel("USB Transfer Mode")
    l_github = QtWidgets.QLabel("v" + VERSION + " | github.com/fourminute/fluffy")
    l_github.setStyleSheet("QLabel { color: rgba(0, 0, 0, 50%) }")
    l_status = QtWidgets.QLabel("Awaiting Selection.")
    l_switch = QtWidgets.QLabel("Switch Not Detected!")
    combo = QComboBox()
    list_nsp = QtWidgets.QListWidget()
    
    #Set Widgets
    try:
        txt_ip.setText(switch_ip)
    except:
        txt_ip.setText("0.0.0.0")
        pass
    txt_ip.setEnabled(False)
    txt_ip2.setEnabled(False)
    txt_port = QtWidgets.QLineEdit("2000")
    txt_port.setEnabled(False)
    h_box = QtWidgets.QHBoxLayout()
    h2_box = QtWidgets.QHBoxLayout()
    h_group = QtWidgets.QButtonGroup()
    combo.addItem("Safe Mode")
    combo.addItem("Normal Mode")
    combo.setCurrentIndex(1)
    tin_radio.setChecked(True)
    tin_radio.toggled.connect(tin_radio_cmd)
    gold_radio.setChecked(False)
    gold_radio.toggled.connect(gold_radio_cmd)
    h_group.addButton(tin_radio)
    h_group.addButton(gold_radio)
    h2_box.addWidget(tin_radio)
    h2_box.addWidget(gold_radio)
    split_check.stateChanged.connect(split_cmd)
    usb_radio.setChecked(True)
    usb_radio.toggled.connect(usb_radio_cmd)
    h_box.addWidget(usb_radio)
    net_radio.toggled.connect(net_radio_cmd)
    h_box.addWidget(net_radio)
    btn_header.setEnabled(False)
    progressbar = QProgressBar()
    progressbar.setAlignment(Qt.AlignVCenter)
    progressbar.setMaximum(100)
    v_box = QtWidgets.QVBoxLayout()
    img_label = QLabel()
    img_label.setAlignment(Qt.AlignCenter)
    pixmap = QPixmap('inlay.png')

    # Set Screen
    screen = app.primaryScreen()
    if screen.size().width() <= 2560:
        if screen.size().width() <= 1920:
            if screen.size().width() <= 1366:
                lowresfix = pixmap.scaled(230, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                img_label.setPixmap(lowresfix)
                list_nsp.setMinimumHeight(3)
            else:
                lowresfix = pixmap.scaled(270, 270, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                img_label.setPixmap(lowresfix)
                list_nsp.setMinimumHeight(10)
        else:
            lowresfix = pixmap.scaled(350, 240, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            img_label.setPixmap(lowresfix)
            list_nsp.setMinimumHeight(10)
    else:
        img_label.setPixmap(pixmap)
        list_nsp.setMinimumHeight(10)

    # Occupy VBOX
    v_box.addLayout(h2_box)
    v_box.addWidget(img_label)
    v_box.addStretch()
    v_box.addLayout(h_box)
    v_box.addWidget(l_ip)
    v_box.addWidget(txt_ip)
    v_box.addWidget(l_host)
    v_box.addWidget(txt_ip2)
    #v_box.addWidget(l_port)
    #v_box.addWidget(txt_port)
    v_box.addWidget(l_rate)
    v_box.addWidget(combo)
    #v_box.addWidget(split_check)
    v_box.addWidget(btn_nsp)
    v_box.addWidget(btn_header)
    v_box.addWidget(l_nsp)
    v_box.addWidget(l_status)
    v_box.addWidget(l_switch)
    v_box.addWidget(progressbar)
    v_box.addWidget(list_nsp)
    v_box.addWidget(l_github)
    window.setLayout(v_box)
    window.setWindowTitle('Fluffy')
    btn_nsp.clicked.connect(nsp_file_dialog)
    btn_header.clicked.connect(send_header_cmd)
    window.setWindowIcon(QIcon('icon.ico'))
    window.show()


    # Revert to network mode
    if not usb_success:
        net_radio_cmd()
        net_radio.setChecked(True)
        usb_radio.setVisible(False)
        l_rate.setVisible(False)
        combo.setVisible(False)
        gold_radio.setVisible(False)
        l_switch.setText("Network mode.")
        l_switch.setStyleSheet(BLUE)
        
    # Main loop
    while True:
        QApplication.processEvents()
        if not window.isVisible():
            close_program()
            sys.exit()
        if is_exiting:
            pid = os.getpid()
            os.kill(pid, signal.SIGTERM)
            
        if not sent_header and not is_installing and is_network:
            l_switch.setText("Network mode.")
            l_switch.setStyleSheet(BLUE)
            if list_nsp.count() > 0:
                btn_header.setEnabled(True)
            else:
                btn_header.setEnabled(False)
            
        if not is_installing and not is_network and usb_success and not sent_header:
            set_switch_text()
                    
        # Tinfoil Network Mode 
        if sent_header and is_network:
            try:
                if is_done:
                    set_done_text()
                else:
                    if is_installing:
                        set_progress_text()
                    else:
                        l_status.setText("Headers Sent.")
                        l_switch.setText("Awaiting Connection Request.")
                        l_switch.setStyleSheet(PURPLE)
            except:
                pass
        # Goldleaf & Tinfoil USB Mode
        if sent_header and not is_network:
            try:
                if is_done:
                    set_done_text()
                else:
                    if is_installing:
                        set_progress_text()
                    else:
                        set_loading_text()
            except:
                pass
            
except Exception as e:
    logging.error(e, exc_info=True)
    exit()
