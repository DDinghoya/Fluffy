"""""
"Pink Donut" design was designed by fourminute exclusively for 
Fluffy and does not infringe on any copyright.

Copyright (c) 2019 fourminute (https://github.com/fourminute)

Fluffy is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Fluffy is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""""
# Imports
import time
import socket
import base64
import os
import sys
import threading
import struct
from binascii import hexlify as hx, unhexlify as uhx
from pathlib import Path
from tkinter import messagebox
import tkinter as tk
from tkinter import filedialog
import logging
try:
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    from SocketServer import TCPServer
    from urllib import quote
    input = raw_input
except ImportError:
    from http.server import SimpleHTTPRequestHandler
    from socketserver import TCPServer
    from urllib.parse import quote
try:
    import qdarkstyle
    from PyQt5 import QtWidgets
    from PyQt5.QtCore import Qt, QThread
    from PyQt5.QtWidgets import *
    from PyQt5.QtGui import QIcon, QPixmap
    app = QtWidgets.QApplication([])
    window = QWidget()
    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
except ImportError:
    messagebox.showinfo("Error","PyQt5 and QDarkStyle not found. Please install with 'pip3 install pyqt5' and 'pip3 install qdarkstyle'. If you cannot install these modules, please use Fluffy v1.4.1.")
    exit()
root = tk.Tk()
root.withdraw()
try:
    import usb.core
    import usb.util
    usb_success = True
except ImportError:
    #messagebox.showinfo("Error","PyUSB and/or LibUSB not found. Please install with 'pip3 install pyusb' and 'pip3 install libusb'\n\nIf you are on MacOS, install LibUSB with 'brew install libusb'. For more info on brew, head to https://brew.sh/.\n\nAlso ensure you have only the latest Python 3(32-bit version) installed on your machine. Having previous versions of Python 3 installed can cause this error to occur.\n\nDo not use Fluffy with the 64-bit version of Python.")
    usb_success = False
    pass
   
# Variables    
CMD_ID_EXIT = 0
CMD_ID_FILE_RANGE = 1
CMD_TYPE_RESPONSE = 1
TRANSFER_RATE = 0
is_installing = False
is_done = False
is_loading = True
is_network = False
sub_success = False
selected_dir = None
selected_files = None
sent_usb_header = False
sent_net_header = False
cur_nsp_name = "NA"
start_time = None
cur_usb_rate = 0
last_usb_rate = 0
cur_progress = 0
end_progress = 0
cur_nsp_count = 1
cur_nsp_name = "NA"
switch_ip = None
net_port = 2000
total_nsp = 0
initial_dir = os.getcwd()
ICON_DATA = ""
DONUT_DATA = ""
LOG_FILENAME = 'fluffy.log'
logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG)
if os.path.isfile(initial_dir + '/tmp_fluffy_0'): # Hacky temp fix for major issue.
    os.remove(initial_dir + '/tmp_fluffy_0')
class TransferRates:
    Safe = 0x1F4
    Normal = 0x100000
TransferRateDict  = {0: TransferRates.Safe,
                     1: TransferRates.Normal}

# Main
def set_start_time():
    global start_time
    start_time = time.time()
    
def set_cur_usb_rate(v):
    global cur_usb_rate
    cur_usb_rate = v

def set_sent_usb_header():
    global sent_usb_header
    sent_usb_header = True

def set_sent_net_header():
    global sent_net_header
    sent_net_header = True

def set_last_usb_rate(v):
    global last_usb_rate
    last_usb_rate = v

def close_program():
    with open(initial_dir + '/tmp_fluffy_0', 'w') as w: # Hacky temp fix for major issue.
        w.write(initial_dir + '/tmp_fluffy_0')
    if os.path.isfile(initial_dir + '/inlay.png'): 
        os.remove(initial_dir + '/inlay.png')
    if os.path.isfile(initial_dir + '/icon.ico'): 
        os.remove(initial_dir + '/icon.ico')
    exit()
                
def set_transfer_rate(v):
    global TRANSFER_RATE
    TRANSFER_RATE = TransferRateDict[v]

def set_dir(d):
    global selected_dir
    selected_dir = d
    
def set_selected_files(f):
    global selected_files
    selected_files = f

def set_installing():
    global is_installing
    is_installing = True
    
def set_progress(c, e):
    global cur_progress
    global end_progress
    end_progress = e
    cur_progress = c

def set_cur_nsp(nsp):
    global cur_nsp_name
    global cur_nsp_count
    if cur_nsp_name != nsp:
        if cur_nsp_name == "NA":
            cur_nsp_name = nsp
        else:
            cur_nsp_count += 1
            cur_nsp_name = nsp
            set_start_time()
            last_progress = 0

def set_total_nsp(n):
    global total_nsp
    total_nsp = n
    
def complete_install():
    global is_done
    is_done = True
    
def complete_loading():
    global is_loading
    global is_installing
    is_loading = False
    is_installing = True

# Network
def set_network(v):
    global is_network
    is_network = v
def set_ip(v):
    global switch_ip
    switch_ip = v
def set_port(v):
    global net_port
    net_port = int(v)
class RangeHTTPRequestHandler(SimpleHTTPRequestHandler):
    def send_head(self):
        path = self.translate_path(self.path)
        ctype = self.guess_type(path)
        if os.path.isdir(path):
            return SimpleHTTPRequestHandler.send_head(self)
        if not os.path.exists(path):
            return self.send_error(404, self.responses.get(404)[0])
        f = open(path, 'rb')
        fs = os.fstat(f.fileno())
        size = fs[6]
        start, end = 0, size - 1
        if 'Range' in self.headers:
            start, end = self.headers.get('Range').strip().strip('bytes=')\
                .split('-')
        if start == "":
            try:
                end = int(end)
            except ValueError as e:
                self.send_error(400, 'invalid range')
            start = size - end
        else:
            try:
                start = int(start)
            except ValueError as e:
                self.send_error(400, 'invalid range')
            if start >= size:
                self.send_error(416, self.responses.get(416)[0])
            if end == "":
                end = size - 1
            else:
                try:
                    end = int(end)
                except ValueError as e:
                    self.send_error(400, 'invalid range')

        start = max(start, 0)
        end = min(end, size - 1)
        self.range = (start, end)
        cont_length = end - start + 1
        if 'Range' in self.headers:
            self.send_response(206)
        else:
            self.send_response(200)
        self.send_header('Content-type', ctype)
        self.send_header('Accept-Ranges', 'bytes')
        self.send_header('Content-Range',
                         'bytes %s-%s/%s' % (start, end, size))
        self.send_header('Content-Length', str(cont_length))
        self.send_header('Last-Modified', self.date_time_string(fs.st_mtime))
        self.end_headers()

        return f

    def copyfile(self, infile, outfile):
        if 'Range' not in self.headers:
            SimpleHTTPRequestHandler.copyfile(self, infile, outfile)
            return
        set_cur_nsp(str(os.path.basename(infile.name)))
        start, end = self.range
        infile.seek(start)
        bufsize = 64 * 1024  # 64KB
        while True:
            if os.path.isfile(initial_dir + '/tmp_fluffy_0'):
                exit()
            buf = infile.read(bufsize)
            if not buf:
                break
            try:
                outfile.write(buf)
                try:
                    set_progress(int(infile.tell()), int(end))
                    elapsed_time = time.time() - start_time
                    if elapsed_time >= 1:
                        set_cur_usb_rate(int(infile.tell()) - last_usb_rate)
                        set_last_usb_rate(int(infile.tell()))
                        set_start_time()
                except Exception as e:
                    print(str(e))
                    pass
            except BrokenPipeError:
                pass
            
class MyServer(TCPServer):
    stopped = False
    def server_bind(self):
        import socket
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(self.server_address)
    def serve_forever(self):
        while not self.stopped:
            self.handle_request()
            if os.path.isfile(initial_dir + '/tmp_fluffy_0'):
                exit()              
    def force_stop(self):
        self.server_close()
        self.stopped = True
        
def init_net_install():
    accepted_extension = ('.nsp')
    hostPort = net_port
    target_ip = switch_ip
    hostIp = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    target_path = str(selected_dir).strip()
    baseUrl = hostIp + ':' + str(hostPort) + '/'
    directory = target_path
    file_list_payload = ''  
    for file in [file for file in next(os.walk(target_path))[2] if file.endswith(accepted_extension)]:
        for y in selected_files:
            if str(file).find(os.path.basename(y)) != -1:
                file_list_payload += baseUrl + quote(file) + '\n'
    file_list_payloadBytes = file_list_payload.encode('ascii')
    if directory and directory != '.':  # doesn't need to move if it's already the current working directory
        os.chdir(directory)
    server = MyServer(('', hostPort), RangeHTTPRequestHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.start()
    try:
        print('Sending URL(s) to ' + target_ip + ' on port ' + str(net_port))
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, net_port))
        sock.sendall(struct.pack('!L', len(file_list_payloadBytes)) + file_list_payloadBytes)
        complete_loading()
        while len(sock.recv(1)) < 1:
            if os.path.isfile(initial_dir + '/tmp_fluffy_0'):
                exit()
            time.sleep(0.05)
        sock.close()
    except Exception as e:
        print('An error occurred: ' + str(e))
        server.force_stop()
        sys.exit(1)
    server.force_stop()
    complete_install()
    
def send_response_header(out_ep, cmd_id, data_size):
    out_ep.write(b'TUC0')
    out_ep.write(struct.pack('<B', CMD_TYPE_RESPONSE))
    out_ep.write(b'\x00' * 3)
    out_ep.write(struct.pack('<I', cmd_id))
    out_ep.write(struct.pack('<Q', data_size))
    out_ep.write(b'\x00' * 0xC)

def file_range_cmd(nsp_dir, in_ep, out_ep, data_size):
    file_range_header = in_ep.read(0x20)
    range_size = struct.unpack('<Q', file_range_header[:8])[0]
    range_offset = struct.unpack('<Q', file_range_header[8:16])[0]
    nsp_name_len = struct.unpack('<Q', file_range_header[16:24])[0]
    nsp_name = bytes(in_ep.read(nsp_name_len)).decode('utf-8')
    set_cur_nsp(str(os.path.basename(nsp_name)))
    send_response_header(out_ep, CMD_ID_FILE_RANGE, range_size)
    with open(nsp_name, 'rb') as f:
        f.seek(range_offset)
        curr_off = 0x0
        end_off = range_size
        read_size = TRANSFER_RATE
        while curr_off < end_off:
            if os.path.isfile(initial_dir + '/tmp_fluffy_0'):
                exit()
            if curr_off + read_size >= end_off:
                read_size = end_off - curr_off
                try:
                    set_progress(int(end_off), int(end_off))
                except:
                    pass
            buf = f.read(read_size)
            out_ep.write(data=buf, timeout=0)
            curr_off += read_size
            try:
                set_progress(int(curr_off), int(end_off))
                elapsed_time = time.time() - start_time
                if elapsed_time >= 1:
                    set_cur_usb_rate(curr_off - last_usb_rate)
                    set_last_usb_rate(curr_off)
                    set_start_time()
            except:
                pass

def poll_commands(nsp_dir, in_ep, out_ep):
    while True:
        if os.path.isfile(initial_dir + '/tmp_fluffy_0'):
            exit()
        cmd_header = bytes(in_ep.read(0x20, timeout=0))
        magic = cmd_header[:4]
        if magic != b'TUC0': 
            continue
        cmd_type = struct.unpack('<B', cmd_header[4:5])[0]
        cmd_id = struct.unpack('<I', cmd_header[8:12])[0]
        data_size = struct.unpack('<Q', cmd_header[12:20])[0]
        if cmd_id == CMD_ID_EXIT:
            complete_install()
            while True:
                if os.path.isfile(initial_dir + '/tmp_fluffy_0'):
                    exit()
        elif cmd_id == CMD_ID_FILE_RANGE:
            file_range_cmd(nsp_dir, in_ep, out_ep, data_size)

def send_nsp_list(s_f, nsp_dir, out_ep):
    nsp_path_list = list()
    nsp_path_list_len = 0
    for nsp_path in [f for f in nsp_dir.iterdir() if f.is_file() and f.suffix == '.nsp']:
        for y in s_f:
            if str(nsp_path).find(os.path.basename(y)) != -1:
                nsp_path_list.append(nsp_path.__str__() + '\n')
                nsp_path_list_len += len(nsp_path.__str__()) + 1
    out_ep.write(b'TUL0')
    out_ep.write(struct.pack('<I', nsp_path_list_len))
    out_ep.write(b'\x00' * 0x8) 
    complete_loading()
    for nsp_path in nsp_path_list:
        out_ep.write(nsp_path)
        
def init_usb_install():
    nsp_dir = Path(selected_dir)
    if not nsp_dir.is_dir():
        raise ValueError('1st argument must be a directory')
    dev = usb.core.find(idVendor=0x057E, idProduct=0x3000)
    if dev is None:
        raise ValueError('Switch is not found!')
    dev.reset()
    dev.set_configuration()
    cfg = dev.get_active_configuration()
    is_out_ep = lambda ep: usb.util.endpoint_direction(ep.bEndpointAddress) == usb.util.ENDPOINT_OUT
    is_in_ep = lambda ep: usb.util.endpoint_direction(ep.bEndpointAddress) == usb.util.ENDPOINT_IN
    out_ep = usb.util.find_descriptor(cfg[(0,0)], custom_match=is_out_ep)
    in_ep = usb.util.find_descriptor(cfg[(0,0)], custom_match=is_in_ep)
    assert out_ep is not None
    assert in_ep is not None
    send_nsp_list(selected_files, nsp_dir, out_ep)
    poll_commands(nsp_dir, in_ep, out_ep)


def send_header_cmd():
    try:
        btn_header.setEnabled(False)
        btn_nsp.setEnabled(False)
        combo.setEnabled(False)
        txt_ip.setEnabled(False)
        net_radio.setEnabled(False)
        usb_radio.setEnabled(False)
        txt_port.setEnabled(False)
        if is_network:
            set_ip(txt_ip.text())
            set_port(txt_port.text())
            set_sent_net_header()
            set_start_time()
            threading.Thread(target = init_net_install).start()
        else:
            set_transfer_rate(combo.currentIndex())
            set_sent_usb_header()
            set_installing()
            set_start_time()
            threading.Thread(target = init_usb_install).start()
    except Exception as e:
        logging.error(e, exc_info=True)
        exit()


# Main
try:
    imgdata = base64.b64decode(ICON_DATA)
    with open('icon.ico', 'wb') as f:
        f.write(imgdata)
    imgdata2 = base64.b64decode(DONUT_DATA)
    with open('inlay.png', 'wb') as f:
        f.write(imgdata2)
    #Network
    def usb_radio_cmd():
        btn_header.setText("Send Header")
        txt_ip.setEnabled(False)
        combo.setEnabled(True)
        set_network(False)
        txt_port.setEnabled(False)
    def net_radio_cmd():
        btn_header.setText("Host NSPs")
        txt_ip.setEnabled(True)
        combo.setEnabled(False)
        set_network(True)
        txt_port.setEnabled(True)
    l_nsp = QtWidgets.QLabel("")
    l_ip = QtWidgets.QLabel("Switch IP:")
    l_port = QtWidgets.QLabel("Port:")
    txt_ip = QtWidgets.QLineEdit("0.0.0.0")
    txt_ip.setEnabled(False)
    txt_port = QtWidgets.QLineEdit("2000")
    txt_port.setEnabled(False)
    h_box = QtWidgets.QHBoxLayout()
    usb_radio = QtWidgets.QRadioButton("USB")
    usb_radio.setChecked(True)
    usb_radio.toggled.connect(usb_radio_cmd)
    h_box.addWidget(usb_radio)
    net_radio = QtWidgets.QRadioButton("Network")
    net_radio.toggled.connect(net_radio_cmd)
    h_box.addWidget(net_radio)    
    btn_nsp = QtWidgets.QPushButton("Select NSPs")
    btn_header = QtWidgets.QPushButton("Send Header")
    btn_header.setEnabled(False)
    l_rate = QtWidgets.QLabel("USB Transfer Mode")
    l_github = QtWidgets.QLabel("v1.6.5 | github.com/fourminute/fluffy")
    l_status = QtWidgets.QLabel("Awaiting Selection.")
    l_switch = QtWidgets.QLabel("<font color='red'>LibUSB and/or PyUSB not found.</font>")
    list_nsp = QtWidgets.QListWidget()
    progressbar = QProgressBar()
    progressbar.setAlignment(Qt.AlignVCenter)
    progressbar.setMaximum(100)
    v_box = QtWidgets.QVBoxLayout()
    img_label = QLabel()
    img_label.setAlignment(Qt.AlignCenter)
    pixmap = QPixmap('inlay.png')
    screen = app.primaryScreen()
    if screen.size().width() <= 2560:
        if screen.size().width() <= 1920:
            if screen.size().width() <= 1366:
                lowresfix = pixmap.scaled(230, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                img_label.setPixmap(lowresfix)
                list_nsp.setMinimumHeight(3)
            else:
                lowresfix = pixmap.scaled(270, 270, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                img_label.setPixmap(lowresfix)
                list_nsp.setMinimumHeight(10)
        else:
            lowresfix = pixmap.scaled(350, 240, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            img_label.setPixmap(lowresfix)
            list_nsp.setMinimumHeight(10)
    else:
        img_label.setPixmap(pixmap)
        list_nsp.setMinimumHeight(10)

        
    def get_nsps():
        try:
            d = filedialog.askopenfilenames(parent=root,title='Select NSPs',filetypes=[("NSP files", "*.nsp")])
            set_dir(os.path.dirname(d[0]))
            file_list = list(d)
            tmp = list()
            list_nsp.clear()
            i = 0
            for f in file_list:
                if str(f).endswith(".nsp"):
                    i += 1
                    list_nsp.addItem(os.path.basename(str(f)))
                    tmp.append(str(f))
            if i > 0:
                btn_header.setEnabled(True)
                set_total_nsp(i)
                set_selected_files(tmp)
                l_status.setText(str(total_nsp) + " NSPs Selected.")
            else:
                btn_header.setEnabled(False)
                l_status.setText("Awaiting Selection.")
        except:
            pass
    combo = QComboBox()
    combo.addItem("Safe Mode")
    combo.addItem("Normal Mode")
    combo.setCurrentIndex(1)
    # Occupy VBOX
    v_box.addWidget(img_label)
    v_box.addStretch()
    v_box.addLayout(h_box)
    v_box.addWidget(l_ip)
    v_box.addWidget(txt_ip)
    #v_box.addWidget(l_port)
    #v_box.addWidget(txt_port)
    v_box.addWidget(l_rate)
    v_box.addWidget(combo)
    v_box.addWidget(btn_nsp)
    v_box.addWidget(btn_header)
    v_box.addWidget(l_nsp)
    v_box.addWidget(l_status)
    v_box.addWidget(l_switch)
    v_box.addWidget(progressbar)
    v_box.addWidget(list_nsp)
    v_box.addWidget(l_github)
    window.setLayout(v_box)
    window.setWindowTitle('Fluffy')
    btn_nsp.clicked.connect(get_nsps)
    btn_header.clicked.connect(send_header_cmd)
    window.setWindowIcon(QIcon('icon.ico'))
    window.show()
    if not usb_success:
        net_radio_cmd()
        net_radio.setChecked(True)
        usb_radio.setVisible(False)
        l_rate.setVisible(False)
        combo.setVisible(False)
    
    while True:
        QApplication.processEvents()
        if is_installing == False:
            if is_network == False and usb_success:
                dev = usb.core.find(idVendor=0x057E, idProduct=0x3000)
                if dev is None:
                    l_switch.setText("<font color='red'>Switch Not Detected!</font>")
                else:
                    l_switch.setText("<font color='green'>Switch Detected!</font>")
        if sent_net_header:
            try:
                if is_done:
                    l_nsp.setText("")
                    l_status.setText("<font color='green'>Successfully Installed " + str(total_nsp) + " NSPs!</font>")
                    l_switch.setText("<font color='green'>You may close Fluffy.</font>")
                else:
                    if is_installing:
                        v = (int(cur_progress) / int(end_progress)) * 100
                        progressbar.setValue(v)
                        n_rate = round((cur_usb_rate /1000000),2)
                        if n_rate < 0:
                            n_rate = 0.0
                        l_status.setText("Installing " + str(cur_nsp_count) + " of " + str(total_nsp) + " NSPs.")
                        l_switch.setText("<font color='green'>Transfer Rate: " + str(n_rate) + "MB/s.</font>")
                        if len(cur_nsp_name) > 13:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name[:13] + "...\"")
                        else:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name + "\"")
                    else:
                        l_status.setText("Headers Sent.")
                        l_switch.setText("<font color='yellow'>Awaiting Connection Request.</font>")
            except:
                pass
        if not window.isVisible():
            close_program()
            exit()
        if sent_usb_header:
            try:
                if is_loading == False:
                    v = (int(cur_progress) / int(end_progress)) * 100
                    progressbar.setValue(v)
                    if is_done:
                        l_nsp.setText("")
                        l_status.setText("<font color='green'>Successfully Installed " + str(total_nsp) + " NSPs!</font>")
                        l_switch.setText("<font color='green'>You may close Fluffy.</font>")
                    else:
                        n_rate = round((cur_usb_rate /1000000),2)
                        if n_rate < 0:
                            n_rate = 0.0
                        l_status.setText("Installing " + str(cur_nsp_count) + " of " + str(total_nsp) + " NSPs.")
                        l_switch.setText("<font color='green'>Transfer Rate: " + str(n_rate) + "MB/s.</font>")
                        if len(cur_nsp_name) > 13:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name[:13] + "...\"")
                        else:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name + "\"")
                else:
                    l_status.setText("Loading " + str(total_usb_nsp) + " NSPs. Please Wait.")
            except:
                pass
except Exception as e:
    logging.error(e, exc_info=True)
    exit()
