"""""
"Pink Donut" design was designed by fourminute exclusively for 
Fluffy and does not infringe on any copyright.

Copyright (c) 2019 fourminute (https://github.com/fourminute)

Fluffy is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Fluffy is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""""
# Imports
import signal
import time
import socket
import base64
import os
import sys
import threading
import struct
from binascii import hexlify as hx, unhexlify as uhx
from pathlib import Path
from tkinter import messagebox
import tkinter as tk
from tkinter import filedialog
import logging
try:
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    from SocketServer import TCPServer
    from urllib import quote
    input = raw_input
except ImportError:
    from http.server import SimpleHTTPRequestHandler
    from socketserver import TCPServer
    from urllib.parse import quote
try:
    from PyQt5 import QtWidgets
    from PyQt5.QtCore import Qt, QThread
    from PyQt5.QtWidgets import *
    from PyQt5.QtGui import QIcon, QPixmap, QColor
    app = QtWidgets.QApplication([])
    window = QWidget()
except:
    messagebox.showinfo("Error","PyQt5 not found. Please install with 'pip3 install pyqt5'. If you cannot install this module, please use Fluffy v1.4.1.")
    exit()
try:
    import qdarkstyle
    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
except:
    print("Error: QDarkStyle not found. Using default.")
    window.setAutoFillBackground(True)
    p = window.palette()
    background_color = QColor()
    background_color.setNamedColor('#dcdcdc')
    p.setColor(window.backgroundRole(), background_color)
    window.setPalette(p)
    pass

root = tk.Tk()
root.withdraw()
try:
    import usb.core
    import usb.util
    usb_success = True
except:
    #messagebox.showinfo("Error","PyUSB not found. Please install with 'pip3 install pyusb'\nIf you are on MacOS, also install LibUSB with 'brew install libusb'. For more info on brew, head to https://brew.sh/.\n\nAlso ensure you have only the latest Python 3(32-bit version) installed on your machine. Having previous versions of Python 3 installed can cause this error to occur.\n\nDo not use Fluffy with the 64-bit version of Python.")
    usb_success = False
    pass
# Variables
CMD_ID_EXIT = 0
CMD_ID_FILE_RANGE = 1
CMD_TYPE_RESPONSE = 1
transfer_rate = 0
is_installing = False
is_done = False
is_loading = True
is_network = False
is_goldleaf = False
is_exiting = False 
selected_dir = None
selected_files = None
sent_header = False
cur_nsp_name = "NA"
start_time = time.time()
cur_transfer_rate = 0
last_transfer_rate = 0
cur_progress = 0
end_progress = 0
cur_nsp_count = 1
cur_nsp_name = "NA"
max_nca_count = 0
cur_nca_count = 1
initial_dir = os.getcwd()
switch_ip = "0.0.0.0"
if os.path.isfile(initial_dir + '/fluffy_config.py'):
    try:
        import fluffy_config
        switch_ip = fluffy_config.switch_ip
    except:
        switch_ip = "0.0.0.0"
        pass
else:
    switch_ip = "0.0.0.0"
    
gold_in = None
gold_out = None
net_port = 2000 #Unused, saved for future reference (Ie. Goldleaf Network)
total_nsp = 0
ICON_DATA = "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/+aU/b/mlL2/5NW8v98Yub/VXHY/y581P8lgdr/JYXf/ySI5P4kiuaPI4rnBDV+4AIAAAAAIbD8JiKw/Nkir/z/Ia/8/1Oi+/+Od/n/ol/6/6Fc+f+kXvr/pmD7/6hi/P+pZP3/smjw/7pr4P+uZ/r/rWj+/61o/v+uaP7/rmn+/65p/v+uaf7/rWj+/6l1/P+Wl/T/e7Dp/5+B9/+sZ/7/q2b9/6pl/f+pZ/n/upbA/7ibqP+oedb/oF30/55X+P+dVvj/nFX3/5tU9/+aU/b/lVT0/39i6v9Rdtz/J4Ha/ySF4P8kiOTvI4rmRjR+4QIir/wBIa/8iSKw/P8jr/3/Z539/55z/P+pY/z/qGP8/4pT8P+QV/T/qmX9/6tm/f+sZ/7/rWj+/65p/v+uaf//rmn//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//rW7+/65r//+uaf//rmn//65p/v+taP7/rGj8/6545/+ui7b/pnfV/6Jc+v+hWvn/n1n4/55X+P+cVff/m1P3/5pS9v+SVvP/bmzm/zSA3P8ih+H/IIrltSSI5Awhr/wfIbD83COv/P9snf3/pnL+/61o/v+sZ/7/rGf+/6Ni+v95UPH/oWL8/61o/v+uaf//rmn//69q//+vav//snb1/7R77v+va/7/r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//rmn//61o/v+saP3/qmb6/6hi/P+lX/v/o136/6Fb+f+fWfj/nVb4/5Rr9P+YWvX/mFL2/31l7P85gd//IIjh8yGI40Ihr/xdIbD9/GWg/f+ndP//r2r//69p//+uaf//rmn//65p//+cYfz/hVr8/6xp//+vav//r2r//69q//+vav//tYDp/8Ciqv+3k7v/r3fr/69q//+vav//r2r//7Vs8v+9bdz/sGr8/69q//+vav//r2r//69q//+vav//r2r//65q//+vaf//rmn+/6xn/v+qZf3/p2L8/6Vf+/+iX/r/jI/w/2yx5P+TbvP/mlP2/5hR9v9+Zez/N4He/yCG35Iir/yfTKj9/6B7//+vav//r2r//69q//+vav//r2r//69q//+vav//pmf//65q//+vav//r2r//69q//+vav//r2r//7Bw+f+yg9n/rom7/65u9/+vav//r2r//7Fq+//Aas7/vGXQ/7Bp+/+vav//r2r//69q//+vav//q2n//5Be/f+oZ/7/r2r//69q//+uaf7/rGf+/6ho/P+LpfD/erTp/5d59f+eV/j/nFX3/5pS9v+YUfb/dmrq/yiC28wrrv3JiY3+/69q//+vav//tX/q/7eH3/+wb/r/r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//r2v9/69q//+vav//r2r//69q//+wavv/u2DL/7df1v+vav//r2r//69q//+vav//rmr//5Zg/P99VPT/pGX7/69q//+vav//rmn//6xt/f+alfX/pG/6/6Re+v+hW/n/nlf4/5tU9/+ZUvb/lFT0/1p04OxYo/31qHP//69q//+vav//tHvu/72buP+3mKn/r4DW/69r/f+vav//r2r//69q//+ubv7/ooz5/5+O+P+ejPf/pID5/69q//+vav//r2r//69q//+vav//r2r//q9q//6vav/+sGn8/rFn9v+vav//r2r//69q//+vav//r2r//69q//+ZX/j/gFHt/6to/f+vav//r2r//69q//+uaP7/q2b9/6hi/P+kXvr/nFj3/4lN8P+aU/f/mVH2/4Fi7PmCj/7/r2r//69q//+vav//r2r//69r/v+wd+3/roDS/69t+v+vav//r2r//69q//+sdf3/j6zx/4ax7f+Cruz/k5jy/69r//+vav/9r2r/5K9q/7evav+Nr2r/aq9q/2Kvav9ir2r/Zq9q/4Ovav+ur2r/269q//qvav//r2r//69q//+vav//qWf8/69q//+vav//r2r//69q//+vav//rmn+/6tm/f+nYvz/n1z4/3BH6/+VUvX/mlL2/5JX9Pmbff7/r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//r2r//q9q/9Cvav9rr2r/I69q/watbP8AHKb5ABul+AAbpPgAGqT4AKhw/gCvav8Er2r/Gq9q/1evav++r2r/+69q//+vav//r2r//69q//+vav//r2v+/6573v+vbvn/r2r//61o/v+qZf3/pmH7/4ZT9f+FUPX/m1T3/5hS9vipcP//r2r//6dl+/+gYvj/r2r//69q//+vav//r2r//69q//+vav//rmr//6Jj+v+oZvz/r2r//69q//+vav/9r2r/oq9q/x4dqPoAHaj5AByn+QAcpvkAHKb5ABul+AAbpfgAG6T4ABqj+AAao/gAGaL3ABmi9wCvav8Qr2r/fq9q//avav//r2r//69q//+vav//tIfS/7GPsv+vbfr/r2r//69q//+taP7/qWT9/51d+/+AU/r/m1X3/5pS9vivav//qWf9/31R8P+ZXvb/r2r//69q//+vav//r2r//69q//+mZv7/iFj2/3pQ7v+jY/r/r2r//69q//+vav/Cr2r/Fm5Z+wA1n/oAHaj6AB2n+QAcp/kAHKb5ABul+QAbpfgAG6T4ABqk+AAao/gAGqL3ABmi9wAZofcAr2r/B69q/5qvav//r2r//69q//+4iN7/vZ6r/7Bz9P+vav//r2r//69q//+uaf//rGf+/6hj/P+gXPr/nlj4/5tU9/isaf/8hFn5/5Nd+P+vav//r2r//69q//+vav//r2r//6tp//+IXP3/lV/6/6to/v+vav//r2r//69q//+vav95exj7AHsY+wBqYPsAWn76AF14+gBXgPoAUYf6AEWR+QA0nPkAIqL4ABqk+AAao/gAGqP3ABmi9wAZofcAGaH3AK9q/0mvav/5r2r//69q//+4iOD/s3rv/69q//+vav//r2r//69q//+vav//rWj+/6tl/f+mYPv/oVv5/5xW9/eoZ//RmGL+/65q//+vav//r2r//69q//+vav//r2r//69q//+taf//r2r//69q//+vav//r2r//69q//+tbP+CrGf/AHsY+wB7GPsAexj7AHsY+wB7GPsAexv7AHkm+wB1P/sAa176AFWA+QA2mfgAHKL4ABmi9wAZovcAGaH3AK5r/1Ovav/6r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//rmn//61n/v+pZPz/pF76/59Y+Oyvav+hr2r//69q//+vav//r2r//69r/v+2guf/sG78/69q//+vav//r2r//69q//+vav//r2r//69q//+dff/VMqz9KnsY+wB7GPsAexj7AHsY+wB7GPsAexj7AHsY+wB7GPsAexj7AHsb+wB0QPsAX3L5ADeX+AAZovcADozuFJpz+7Svav//r2r//69q//+waPj/r2r//69q//+vav//r2r//69q//+vav//r2r//65p//+rZv3/p2H8/6Jb+cuvav9Tr2r/+a9q//+vav//r2r//69s/f++m73/uIzT/69q//+vav//r2r//69q//+vav//r2r//69q//+kd///VKT9xB+s/D0eq/sEexj7AHsY+wB7GPsAexj7AHsY+wB7GPsAexj7AHsY+wB7GPsAexj7ABGR8QEOj/ApRYnxqJ5y/P2vav//r2r//7Jn9P+6W8T/sGn8/69q//+va/7/sXP3/7By9v+vcPb/r2z7/69q//+taP7/qmT9/6Zg+4Kvav8Sr2r/xK9q//+vav//r2r//69q//+xdvL/t5mn/7B36/+vav//r2r//69q//+vav//r2r//7Nl7P+xZvP/kYf+/0Kn/OseqvueHaj6SRym+RobpPkHGqL4ARqg9wEZnfYBF5v1ARSZ9AUSl/MUEZXyPBCS8YozjvHfiHz4/65q//+vav//r2r//7pm2f+6Y9X/r2r//69q//+zevD/wKKu/7udpv+yk6X/rX3Z/69q//+uaf//rGf+4qpk/SsAAAAAr2r/VK9q//Ovav//r2r//69q//+vav//r33e/62Bz/+vav//r2r//69q//+vav//smn0/75cuv+yZvD/r2r//5mA/v9infz/Laf6+Byn+d0bpPm+GaL4oRig95kXnvaZFZz1nRSa9LcTl/PXIpTy81mL9P+TePr/q2n9/69q//+vav//sWr7/8Nsw/+zavP/r2r//69q//+vav//sG/7/7Bu+/+vbfv/r2v9/69q//+vav/9rmn/f6xn/gEAAAAAr2r/Bq9q/4+vav/9r2r//69q//+vav//r2r//69s/P+vav//r2r//69q//+wavz/wWrK/7ln3/+vav//r2r//69q//+rb///l4D+/3eR/P9cmvr/R535/0Gc+P9Bmvf/RJf2/1iS9/9zifj/k3r7/6lu/v+lZfz/glPu/6pn/P+vav//sWv7/7lt5/+vav7/r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav+0r2r/FHAA5gAAAAAAAAAAAK9q/xSvav+or2r//q9q//+vav//r2r//69q//+vav//r2r//69q//+0a/X/vm7Z/7Bq/f+vav//r2r//7Bu/P+4id7/snX0/69q//+sbf//p3H+/6Zy/v+mcv7/p3D+/6tt//+vav//r2r//6ln/v9+VPT/l173/69q//+vav//r2r//69q//+vav//r2r//6Zl+/+qaP3/rmr//69q//+vav//r2r//69q/8evav8pcgDpAHAA5gAAAAAAAAAAAAAAAACvav8Xr2r/p69q//yva///m5r2/6CQ+P+tb/7/r2r//69q//+vav//r2r+/69q//+vav//r2r//7Bu/P+7k8z/vJ6m/7KIyv+vb/b/r2r//69q//+vav//r2r//69q//+vav//rmr//49e/f+UX/v/r2r//69q//+vav//r2r//69q//+vav//rWn+/4pW8P95UPD/g1f3/5pi/v+uav//r2r/xK9q/y0yAG0AbgDhAHAA5gAAAAAAAAAAAAAAAAAAAAAAr2r/Ea9q/4mvav/yoY/4/4O27P98ter/m432/69q//+vav//r2r//69q//+vav//r2r//69q//+vav//sHTz/6+Fy/+ueOT/r2r//69q//+vav//r2r//69q//+vav//r2r//6po//+uav//r2r//65s/v+vav//r2r//69q//+vav//r2r//65q//+qaP7/oWT9/59k/vquav+nr2r/IgAAAAAaAD8AaADWAHAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAK9q/wWvav9Sr2r/zK5u/v6fivf/mJH0/69r//+vav//r2r//69q//+vav//pGX7/5hd9f+uaf7/r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//r2r//69q//+vav//rW7+/4mj7v+lffr/r2r//69q//+vav//r2r//69q//+vav//r2r/3a9q/22vav8NAAAAAAAAAAASAC8AZQDQAHAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr2r/Gq9q/3mvav/ar2r//q9q//+vav//r2r//6Zm/v+IWvn/elHx/5Vc9f+uav//r2r//69q//+vav//r2r//69q//+1a/D/uW3o/69q//+vav//r2r//69q//+vav//mJf1/3+x6/+tb/7/r2r//69q//+vav//r2r//69q/+evav+Tr2r/Ka5q/gAAAAAAAAAAAAAAAAANACYAYwDMAHAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK5q/gCvav8hr2r/c69q/8qvav/2r2r//55k/v+ZYf3/q2j+/69q//+vav//r2r//69q//+vav//sGn7/7lk2P/CacD/uGzq/69q//+vav//r2r//69q//+pfPz/gLzr/6WD+v+vav//r2r//69q//qvav/Xr2r/ia9q/y+vav8DAAAAAAAAAAAAAAAAAAAAAAAAAAAQACwAZADPAHAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqWb2AK9q/xGvav9Cr2r/ja9q/8qvav/ur2r//K9q//+vav//r2r//69q//+vav//tmDc/7pfy/+yafb/r2r//69q//+vav//r2r//69q//+pffz/oJL4/q9q//Kvav/Tr2r/nK9q/1Cvav8Zr2r+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAEkAagDZAHAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArmr+Aa9q/w6vav8ur2r/V69q/4evav+ur2r/yq9q/9yvav/nsGn87K9q/uyvav/sr2r/7K9q/+mvav/er2r/zq9q/7Svav+Rr2r/Ya9q/zavav8Tr2r/AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAG8AbwDjAHAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK1p/ACvav8Dr2r/DK9q/xavav8hr2r/J69q/yevav8nr2r/J69q/yOvav8Yr2r/Dq9q/wWuav4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBQAKgAcgDpAHAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAEABaALoAcgDpAHAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQBJAJoAcQDoAHAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAEMAVwC1AG4A4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAtAEIAjQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////8AAP///////wAA////////AAD///////8AAP///////wAA//+AAf//AAD/+AAAH/4AAP/gAAAH/gAA/4AAAAH+AAD+AAAAAH4AAPwAAAAAPgAA+AAAAAAeAADwAAAAAA4AAOAAAAAABgAAwAAAAAACAADAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfgAAAAAAAAP/wAAAAAAAB//gAAAAAAAP//AAAAAAAA//8AAAAAAAB//gAAAAAAAB/4AAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAEAAMAAAAAAAwAA4AAAAAAHAADwAAAAAA8AAPgAAAAAHwAA/gAAAAB/AAD/gAAAAP8AAP/gAAAD/wAA//gAAB//AAD//8AD//8AAP///////wAA////////AAD///////8AAP///////wAA////////AAA="
DONUT_DATA = ""
LOG_FILENAME = 'fluffy.log'
logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG)
class TransferRates:
    Safe = 0x1F4
    Normal = 0x100000
TransferRateDict  = {0: TransferRates.Safe,
                     1: TransferRates.Normal}

# Main
def set_start_time():
    global start_time
    start_time = time.time()
    
def set_cur_transfer_rate(v):
    global cur_transfer_rate
    cur_transfer_rate = v

def set_sent_header():
    global sent_header
    sent_header = True

def set_last_transfer_rate(v):
    global last_transfer_rate
    last_transfer_rate = v

def close_program():
    global is_exiting
    if os.path.isfile(initial_dir + '/inlay.png'): 
        os.remove(initial_dir + '/inlay.png')
    if os.path.isfile(initial_dir + '/icon.ico'): 
        os.remove(initial_dir + '/icon.ico')
    if is_network and sent_header:
        with open(initial_dir + '/fluffy_config.py', 'w') as w:
            w.write('switch_ip = \"' + str(switch_ip) + "\"")
    is_exiting = True
    sys.exit()
                
def set_transfer_rate(v):
    global transfer_rate
    transfer_rate = TransferRateDict[v]

def set_dir(d):
    global selected_dir
    selected_dir = d

    
def set_selected_files(f):
    global selected_files
    selected_files = f

def set_installing():
    global is_installing
    is_installing = True
    
def set_progress(c, e):
    global cur_progress
    global end_progress
    end_progress = e
    cur_progress = c

def set_cur_nsp(nsp):
    global cur_nsp_name
    global cur_nsp_count
    if cur_nsp_name != nsp:
        if cur_nsp_name == "NA":
            cur_nsp_name = nsp
        else:
            cur_nsp_count += 1
            cur_nsp_name = nsp
            set_start_time()
            last_progress = 0

def set_total_nsp(n):
    global total_nsp
    total_nsp = n
    
def complete_install():
    global is_done
    is_done = True
    
def complete_loading():
    global is_loading
    global is_installing
    is_loading = False
    is_installing = True
    
# Goldleaf. A work of magic done by
# https://github.com/friedkeenan. Thank you!
# Modified by fourminute.
class CommandId:
    ConnectionRequest=0
    ConnectionResponse=1
    NSPName=2
    Start=3
    NSPData=4
    NSPContent=5
    NSPTicket=6
    Finish=7
def set_nca_count(c, m):
    global cur_nca_count
    global max_nca_count
    cur_nca_count = c
    max_nca_count = m

def set_goldleaf(v):
    global is_goldleaf
    is_goldleaf = v

class PFS0:
    class FileEntry:
        def __init__(self,data):
            self.file_offset=struct.unpack("<Q",data[:0x8])[0]
            self.file_size=struct.unpack("<Q",data[0x8:0x10])[0]
            self.name_offset=struct.unpack("<I",data[0x10:0x14])[0]
            self.name=None
    def __init__(self,filename):
        self.f=open(filename,"rb")
        if self.read_raw(0x0,0x4)!=b"PFS0":
            raise ValueError("File is not a PFS0")
        num_files=struct.unpack("<I",self.read_raw(0x4,0x4))[0]
        len_strings=struct.unpack("<I",self.read_raw(0x8,0x4))[0]
        self.files=[PFS0.FileEntry(self.read_raw(0x10+0x18*x,0x18)) for x in range(num_files)]
        self.header_size=0x10+0x18*num_files
        file_names=self.read_raw(self.header_size,len_strings).split(b"\0")[:num_files]
        for i in range(num_files):
            self.files[i].name=file_names[i].decode()
        self.header_size+=len_strings
    def read_raw(self,offset,size):
        self.f.seek(offset)
        return self.f.read(size)
    def __del__(self):
        self.f.close()
    def read_file(self,idx):
        file_entry=self.files[idx]
        return self.read_raw(self.header_size+file_entry.file_offset,file_entry.file_size)
    def read_chunks(self,idx,chunk_size=0xbb8): # Experiment here
        file_entry=self.files[idx]
        to_read=file_entry.file_size
        cur_offset=self.header_size+file_entry.file_offset
        while to_read>0:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            tor=min(chunk_size,to_read)
            yield self.read_raw(cur_offset,tor)
            cur_offset+=tor
            to_read-=tor
            set_progress(cur_offset, int(file_entry.file_size))
            elapsed_time = time.time() - start_time
            if elapsed_time >= 1:
                set_cur_transfer_rate(int(cur_offset) - last_transfer_rate)
                set_last_transfer_rate(int(cur_offset))
                set_start_time()

class Command:
    GLUC = 0x43554c47
    def __init__(self,cmd_id=0,raw=None):
        if raw is None:
            self.cmd_id=cmd_id
            self.magic=self.GLUC
        else:
            self.magic,self.cmd_id=struct.unpack("<II",raw)
    def magic_ok(self):
        return self.magic==self.GLUC
    def has_id(self,cmd_id):
        return self.cmd_id==cmd_id
    def __bytes__(self):
        return struct.pack("<II",self.magic,self.cmd_id)
    
def write(buffer):
    gold_out.write(buffer)
    
def read(length):
    return gold_in.read(length).tobytes()

def init_goldleaf_usb_install():
    global gold_in
    global gold_out
    for file in selected_files:
        try:
            dev.set_configuration()
            intf=dev.get_active_configuration()[(0,0)]
            gold_out = usb.util.find_descriptor(intf,custom_match=lambda e:usb.util.endpoint_direction(e.bEndpointAddress)==usb.util.ENDPOINT_OUT)
            gold_in = usb.util.find_descriptor(intf,custom_match=lambda e:usb.util.endpoint_direction(e.bEndpointAddress)==usb.util.ENDPOINT_IN)
            set_cur_nsp(os.path.basename(file))
            goldleaf_usb(str(file))
            dev.reset()
        except Exception as e:
            logging.error(e, exc_info=True)
            exit()
        usb.util.dispose_resources(dev)
        dev.reset()

def goldleaf_usb(nsp_path):
    c=Command()
    write(bytes(c))
    while True:
        if is_exiting:
            pid = os.getpid()
            os.kill(pid, signal.SIGTERM)
        try:
            c=Command(raw=read(8))
            if c.has_id(CommandId.ConnectionResponse) and c.magic_ok():
                c=Command(CommandId.NSPName)
                write(bytes(c))
                base_name=os.path.basename(nsp_path)
                write(struct.pack("<I",len(base_name)))
                write(base_name.encode())
                
            elif c.has_id(CommandId.Start)and c.magic_ok():
                start_recv = True
                c=Command(CommandId.NSPData)
                write(bytes(c))
                pnsp=PFS0(nsp_path)
                write(struct.pack("<I",len(pnsp.files)))
                tik_idx=-1
                tmp_idx=0
                for file in pnsp.files:
                    write(struct.pack("<I",len(file.name)))
                    write(file.name.encode())
                    write(struct.pack("<Q",pnsp.header_size+file.file_offset))
                    write(struct.pack("<Q",file.file_size))
                    if os.path.splitext(file.name)[1][1:].lower()=="tik":
                        tik_idx=tmp_idx
                    tmp_idx+=1
                    complete_loading()

            elif c.has_id(CommandId.NSPContent)and c.magic_ok():
                idx=struct.unpack("<I", read(4))[0]
                for buf in pnsp.read_chunks(idx):
                    while True:
                        if is_exiting:
                            pid = os.getpid()
                            os.kill(pid, signal.SIGTERM)
                        try:
                            write(buf)
                            break
                        except:
                            pass
                    try:
                        set_nca_count(idx+1, len(pnsp.files))
                    except Exception as e:
                        print(str(e))

            elif c.has_id(CommandId.NSPTicket)and c.magic_ok():
                write(pnsp.read_file(tik_idx))

            elif c.has_id(CommandId.Finish)and c.magic_ok():
                set_progress(100,100)
                complete_install()
                while True:
                    if is_exiting:
                        pid = os.getpid()
                        os.kill(pid, signal.SIGTERM)
        except:
            pass
    return 0

# Tinfoil Network
def set_network(v):
    global is_network
    is_network = v
def set_ip(v):
    global switch_ip
    switch_ip = v
def set_port(v):
    global net_port
    net_port = int(v)
class RangeHTTPRequestHandler(SimpleHTTPRequestHandler):
    def send_head(self):
        path = self.translate_path(self.path)
        ctype = self.guess_type(path)
        if os.path.isdir(path):
            return SimpleHTTPRequestHandler.send_head(self)
        if not os.path.exists(path):
            return self.send_error(404, self.responses.get(404)[0])
        f = open(path, 'rb')
        fs = os.fstat(f.fileno())
        size = fs[6]
        start, end = 0, size - 1
        if 'Range' in self.headers:
            start, end = self.headers.get('Range').strip().strip('bytes=')\
                .split('-')
        if start == "":
            try:
                end = int(end)
            except ValueError as e:
                self.send_error(400, 'invalid range')
            start = size - end
        else:
            try:
                start = int(start)
            except ValueError as e:
                self.send_error(400, 'invalid range')
            if start >= size:
                self.send_error(416, self.responses.get(416)[0])
            if end == "":
                end = size - 1
            else:
                try:
                    end = int(end)
                except ValueError as e:
                    self.send_error(400, 'invalid range')

        start = max(start, 0)
        end = min(end, size - 1)
        self.range = (start, end)
        cont_length = end - start + 1
        if 'Range' in self.headers:
            self.send_response(206)
        else:
            self.send_response(200)
        self.send_header('Content-type', ctype)
        self.send_header('Accept-Ranges', 'bytes')
        self.send_header('Content-Range',
                         'bytes %s-%s/%s' % (start, end, size))
        self.send_header('Content-Length', str(cont_length))
        self.send_header('Last-Modified', self.date_time_string(fs.st_mtime))
        self.end_headers()

        return f

    def copyfile(self, infile, outfile):
        if 'Range' not in self.headers:
            SimpleHTTPRequestHandler.copyfile(self, infile, outfile)
            return
        set_cur_nsp(str(os.path.basename(infile.name)))
        start, end = self.range
        infile.seek(start)
        bufsize = 64 * 1024  # 64KB
        while True:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            buf = infile.read(bufsize)
            if not buf:
                break
            try:
                outfile.write(buf)
                try:
                    set_progress(int(infile.tell()), int(end))
                    elapsed_time = time.time() - start_time
                    if elapsed_time >= 1:
                        set_cur_transfer_rate(int(infile.tell()) - last_transfer_rate)
                        set_last_transfer_rate(int(infile.tell()))
                        set_start_time()
                except:
                    pass
            except BrokenPipeError:
                pass
            
class MyServer(TCPServer):
    stopped = False
    def server_bind(self):
        import socket
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(self.server_address)
    def serve_forever(self):
        while not self.stopped:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            self.handle_request()             
    def force_stop(self):
        self.server_close()
        self.stopped = True
        
def init_tinfoil_net_install():
    accepted_extension = ('.nsp')
    hostPort = 2000
    target_ip = switch_ip
    hostIp = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    target_path = str(selected_dir).strip()
    baseUrl = hostIp + ':' + str(hostPort) + '/'
    directory = target_path
    file_list_payload = ''  
    for file in [file for file in next(os.walk(target_path))[2] if file.endswith(accepted_extension)]:
        for y in selected_files:
            if str(file).find(os.path.basename(y)) != -1:
                file_list_payload += baseUrl + quote(file) + '\n'
    file_list_payloadBytes = file_list_payload.encode('ascii')
    if directory and directory != '.':  # doesn't need to move if it's already the current working directory
        os.chdir(directory)
    server = MyServer(('', hostPort), RangeHTTPRequestHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.start()
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, 2000))
        sock.sendall(struct.pack('!L', len(file_list_payloadBytes)) + file_list_payloadBytes)
        complete_loading()
        while len(sock.recv(1)) < 1:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            time.sleep(0.05)
        sock.close()
    except Exception as e:
        logging.error(e, exc_info=True)
        server.force_stop()
        sys.exit(1)
    server.force_stop()
    complete_install()
    while True:
        if is_exiting:
            pid = os.getpid()
            os.kill(pid, signal.SIGTERM)

# Tinfoil USB
def send_response_header(out_ep, cmd_id, data_size):
    out_ep.write(b'TUC0')
    out_ep.write(struct.pack('<B', CMD_TYPE_RESPONSE))
    out_ep.write(b'\x00' * 3)
    out_ep.write(struct.pack('<I', cmd_id))
    out_ep.write(struct.pack('<Q', data_size))
    out_ep.write(b'\x00' * 0xC)

def file_range_cmd(nsp_dir, in_ep, out_ep, data_size):
    file_range_header = in_ep.read(0x20)
    range_size = struct.unpack('<Q', file_range_header[:8])[0]
    range_offset = struct.unpack('<Q', file_range_header[8:16])[0]
    nsp_name_len = struct.unpack('<Q', file_range_header[16:24])[0]
    nsp_name = bytes(in_ep.read(nsp_name_len)).decode('utf-8')
    set_cur_nsp(str(os.path.basename(nsp_name)))
    send_response_header(out_ep, CMD_ID_FILE_RANGE, range_size)
    with open(nsp_name, 'rb') as f:
        f.seek(range_offset)
        curr_off = 0x0
        end_off = range_size
        read_size = transfer_rate
        while curr_off < end_off:
            if is_exiting:
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
            if curr_off + read_size >= end_off:
                read_size = end_off - curr_off
                try:
                    set_progress(int(end_off), int(end_off))
                except:
                    pass
            buf = f.read(read_size)
            out_ep.write(data=buf, timeout=0)
            curr_off += read_size
            try:
                set_progress(int(curr_off), int(end_off))
                elapsed_time = time.time() - start_time
                if elapsed_time >= 1:
                    set_cur_transfer_rate(curr_off - last_transfer_rate)
                    set_last_transfer_rate(curr_off)
                    set_start_time()
            except:
                pass

def poll_commands(nsp_dir, in_ep, out_ep):
    while True:
        if is_exiting:
            pid = os.getpid()
            os.kill(pid, signal.SIGTERM)
        cmd_header = bytes(in_ep.read(0x20, timeout=0))
        magic = cmd_header[:4]
        if magic != b'TUC0': 
            continue
        cmd_type = struct.unpack('<B', cmd_header[4:5])[0]
        cmd_id = struct.unpack('<I', cmd_header[8:12])[0]
        data_size = struct.unpack('<Q', cmd_header[12:20])[0]
        if cmd_id == CMD_ID_EXIT:
            complete_install()
            while True:
                if is_exiting:
                    pid = os.getpid()
                    os.kill(pid, signal.SIGTERM)
        elif cmd_id == CMD_ID_FILE_RANGE:
            file_range_cmd(nsp_dir, in_ep, out_ep, data_size)

def send_nsp_list(s_f, nsp_dir, out_ep):
    nsp_path_list = list()
    nsp_path_list_len = 0
    for nsp_path in [f for f in nsp_dir.iterdir() if f.is_file() and f.suffix == '.nsp']:
        for y in s_f:
            if str(nsp_path).find(os.path.basename(y)) != -1:
                nsp_path_list.append(nsp_path.__str__() + '\n')
                nsp_path_list_len += len(nsp_path.__str__()) + 1
    out_ep.write(b'TUL0')
    out_ep.write(struct.pack('<I', nsp_path_list_len))
    out_ep.write(b'\x00' * 0x8) 
    complete_loading()
    for nsp_path in nsp_path_list:
        out_ep.write(nsp_path)
        
def init_tinfoil_usb_install():
    nsp_dir = Path(selected_dir)
    if not nsp_dir.is_dir():
        raise ValueError('1st argument must be a directory')
    dev = usb.core.find(idVendor=0x057E, idProduct=0x3000)
    if dev is None:
        raise ValueError('Switch is not found!')
    dev.reset()
    dev.set_configuration()
    cfg = dev.get_active_configuration()
    is_out_ep = lambda ep: usb.util.endpoint_direction(ep.bEndpointAddress) == usb.util.ENDPOINT_OUT
    is_in_ep = lambda ep: usb.util.endpoint_direction(ep.bEndpointAddress) == usb.util.ENDPOINT_IN
    out_ep = usb.util.find_descriptor(cfg[(0,0)], custom_match=is_out_ep)
    in_ep = usb.util.find_descriptor(cfg[(0,0)], custom_match=is_in_ep)
    assert out_ep is not None
    assert in_ep is not None
    send_nsp_list(selected_files, nsp_dir, out_ep)
    poll_commands(nsp_dir, in_ep, out_ep)


def send_header_cmd():
    try:
        btn_header.setEnabled(False)
        btn_nsp.setEnabled(False)
        combo.setEnabled(False)
        txt_ip.setEnabled(False)
        net_radio.setEnabled(False)
        usb_radio.setEnabled(False)
        txt_port.setEnabled(False)
        tin_radio.setEnabled(False)
        gold_radio.setEnabled(False)
        if is_network:
            set_ip(txt_ip.text())
            set_port(txt_port.text())
            set_sent_header()
            set_start_time()
            threading.Thread(target = init_tinfoil_net_install).start()
        else:
            if is_goldleaf:
                set_sent_header()
                set_installing()
                set_start_time()
                threading.Thread(target = init_goldleaf_usb_install).start()
            else:
                set_transfer_rate(combo.currentIndex())
                set_sent_header()
                set_installing()
                set_start_time()
                threading.Thread(target = init_tinfoil_usb_install).start()
    except Exception as e:
        logging.error(e, exc_info=True)
        exit()


# Main
try:
    imgdata = base64.b64decode(ICON_DATA)
    with open('icon.ico', 'wb') as f:
        f.write(imgdata)
    imgdata2 = base64.b64decode(DONUT_DATA)
    with open('inlay.png', 'wb') as f:
        f.write(imgdata2)
        
    def tin_radio_cmd():
        l_status.setText("Awaiting Selection.")
        btn_nsp.setText("Select NSPs")
        l_nsp.setText("")
        txt_ip.setEnabled(False)
        txt_port.setEnabled(False)
        net_radio.setChecked(False)
        usb_radio.setChecked(True)
        net_radio.setVisible(True)
        combo.setEnabled(True)
        set_goldleaf(False)
        split_check.setEnabled(True)
        
    def gold_radio_cmd():
        l_status.setText("Awaiting Selection.")
        btn_nsp.setText("Select NSP")
        l_nsp.setText("<font color='red'>Experimental: Use at your own risk.</font>")
        txt_ip.setEnabled(False)
        txt_port.setEnabled(False)
        net_radio.setChecked(False)
        usb_radio.setChecked(True)
        net_radio.setVisible(False)
        combo.setEnabled(False)
        set_network(False)
        set_goldleaf(True)
        split_check.setCheckState(False)
        split_check.setEnabled(False)
        list_nsp.clear()
        
    def usb_radio_cmd():
        btn_nsp.setText("Select NSPs")
        txt_ip.setEnabled(False)
        combo.setEnabled(True)
        set_network(False)
        txt_port.setEnabled(False)
        split_check.setEnabled(True)
        
    def net_radio_cmd():
        btn_nsp.setText("Select NSPs")
        txt_ip.setEnabled(True)
        combo.setEnabled(False)
        set_network(True)
        txt_port.setEnabled(True)
        split_check.setCheckState(False)
        split_check.setEnabled(False)
        

        
    l_nsp = QtWidgets.QLabel("")
    l_ip = QtWidgets.QLabel("Switch IP:")
    l_port = QtWidgets.QLabel("Port:")
    txt_ip = QtWidgets.QLineEdit("0.0.0.0")
    try:
        txt_ip.setText(switch_ip)
    except:
        txt_ip.setText("0.0.0.0")
        pass
    txt_ip.setEnabled(False)
    txt_port = QtWidgets.QLineEdit("2000")
    txt_port.setEnabled(False)
    h_box = QtWidgets.QHBoxLayout()
    h2_box = QtWidgets.QHBoxLayout()
    h_group = QtWidgets.QButtonGroup()

    #Tinfoil/Goldleaf
    tin_radio = QtWidgets.QRadioButton("Adubbz/Tinfoil")
    tin_radio.setChecked(True)
    tin_radio.toggled.connect(tin_radio_cmd)
    gold_radio = QtWidgets.QRadioButton("XorTroll/Goldleaf")
    gold_radio.setChecked(False)
    gold_radio.toggled.connect(gold_radio_cmd)
    h_group.addButton(tin_radio)
    h_group.addButton(gold_radio)
    h2_box.addWidget(tin_radio)
    h2_box.addWidget(gold_radio)
    def split_cmd():
        if split_check.checkState():
            btn_nsp.setText("Select Folder")
        else:
            btn_nsp.setText("NSP Selection")
        
    split_check = QtWidgets.QCheckBox("Use Split NSP")
    split_check.stateChanged.connect(split_cmd)
    usb_radio = QtWidgets.QRadioButton("USB")
    usb_radio.setChecked(True)
    usb_radio.toggled.connect(usb_radio_cmd)
    h_box.addWidget(usb_radio)
    net_radio = QtWidgets.QRadioButton("Network")
    net_radio.toggled.connect(net_radio_cmd)
    h_box.addWidget(net_radio)
    btn_nsp = QtWidgets.QPushButton("Select NSPs")
    btn_header = QtWidgets.QPushButton("Begin Transfer")
    btn_header.setEnabled(False)
    l_rate = QtWidgets.QLabel("USB Transfer Mode")
    l_github = QtWidgets.QLabel("v1.9.0 | github.com/fourminute/fluffy")
    l_status = QtWidgets.QLabel("Awaiting Selection.")
    l_switch = QtWidgets.QLabel("<font color='pink'>Switch Not Detected!</font>")
    list_nsp = QtWidgets.QListWidget()
    progressbar = QProgressBar()
    progressbar.setAlignment(Qt.AlignVCenter)
    progressbar.setMaximum(100)
    v_box = QtWidgets.QVBoxLayout()
    img_label = QLabel()
    img_label.setAlignment(Qt.AlignCenter)
    pixmap = QPixmap('inlay.png')
    screen = app.primaryScreen()
    
    if screen.size().width() <= 2560:
        if screen.size().width() <= 1920:
            if screen.size().width() <= 1366:
                lowresfix = pixmap.scaled(230, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                img_label.setPixmap(lowresfix)
                list_nsp.setMinimumHeight(3)
            else:
                lowresfix = pixmap.scaled(270, 270, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                img_label.setPixmap(lowresfix)
                list_nsp.setMinimumHeight(10)
        else:
            lowresfix = pixmap.scaled(350, 240, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            img_label.setPixmap(lowresfix)
            list_nsp.setMinimumHeight(10)
    else:
        img_label.setPixmap(pixmap)
        list_nsp.setMinimumHeight(10)

        
    def nsp_file_dialog():
            try:
                if not is_goldleaf:
                    d = filedialog.askopenfilenames(parent=root,title='Select NSPs',filetypes=[("NSP files", "*.nsp")])
                    set_dir(os.path.dirname(d[0]))
                    file_list = list(d)
                else:
                    d = filedialog.askopenfilename(parent=root,title='Select NSP',filetypes=[("NSP files", "*.nsp")])
                    set_dir(os.path.dirname(d))
                    file_list = list()
                    file_list.append(str(d))
                tmp = list()
                list_nsp.clear()
                i = 0
                for f in file_list:
                    if str(f).endswith(".nsp"):
                        i += 1
                        list_nsp.addItem(os.path.basename(str(f)))
                        tmp.append(str(f))
                if i > 0:
                    btn_header.setEnabled(True)
                    set_total_nsp(i)
                    set_selected_files(tmp)
                    l_status.setText(str(total_nsp) + " NSPs Selected.")
                else:
                    btn_header.setEnabled(False)
                    l_status.setText("Awaiting Selection.")
            except:
                pass
            
    combo = QComboBox()
    combo.addItem("Safe Mode")
    combo.addItem("Normal Mode")
    combo.setCurrentIndex(1)
    # Occupy VBOX
    v_box.addLayout(h2_box)
    v_box.addWidget(img_label)
    v_box.addStretch()
    v_box.addLayout(h_box)
    v_box.addWidget(l_ip)
    v_box.addWidget(txt_ip)
    #v_box.addWidget(l_port)
    #v_box.addWidget(txt_port)
    v_box.addWidget(l_rate)
    v_box.addWidget(combo)
    #v_box.addWidget(split_check)
    v_box.addWidget(btn_nsp)
    v_box.addWidget(btn_header)
    v_box.addWidget(l_nsp)
    v_box.addWidget(l_status)
    v_box.addWidget(l_switch)
    v_box.addWidget(progressbar)
    v_box.addWidget(list_nsp)
    v_box.addWidget(l_github)
    window.setLayout(v_box)
    window.setWindowTitle('Fluffy')
    btn_nsp.clicked.connect(nsp_file_dialog)
    btn_header.clicked.connect(send_header_cmd)
    window.setWindowIcon(QIcon('icon.ico'))
    window.show()
    
    if not usb_success:
        net_radio_cmd()
        net_radio.setChecked(True)
        usb_radio.setVisible(False)
        l_rate.setVisible(False)
        combo.setVisible(False)
        gold_radio.setVisible(False)
        l_switch.setText("<font color='light blue'>Network mode.</font>")
        
    while True:
        if is_exiting:
            pid = os.getpid()
            os.kill(pid, signal.SIGTERM)
        QApplication.processEvents()
        if not sent_header and is_installing == False and is_network:
            l_switch.setText("<font color='light blue'>Network mode.</font>")
            if list_nsp.count() > 0:
                btn_header.setEnabled(True)
            else:
                btn_header.setEnabled(False)
            
        if is_installing == False and is_network == False and usb_success == True:   
            dev = usb.core.find(idVendor=0x057E, idProduct=0x3000)
            if dev is None:
                l_switch.setText("<font color='pink'>Switch Not Detected!</font>")
                btn_header.setEnabled(False)
            else:
                l_switch.setText("<font color='green'>Switch Detected!</font>")
                if list_nsp.count() > 0:
                    btn_header.setEnabled(True)
                else:
                    btn_header.setEnabled(False)
                
        if sent_header and is_network:
            try:
                if is_done:
                    l_nsp.setText("")
                    l_status.setText("<font color='green'>Successfully Installed " + str(total_nsp) + " NSPs!</font>")
                    l_switch.setText("<font color='green'>You may close Fluffy.</font>")
                else:
                    if is_installing:
                        v = (int(cur_progress) / int(end_progress)) * 100
                        progressbar.setValue(v)
                        n_rate = round((cur_transfer_rate /1000000),2)
                        if n_rate < 0:
                            n_rate = 0.0
                        l_status.setText("Installing " + str(cur_nsp_count) + " of " + str(total_nsp) + " NSPs.")
                        l_switch.setText("<font color='green'>Transfer Rate: " + str(n_rate) + "MB/s.</font>")
                        if len(cur_nsp_name) > 13:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name[:13] + "...\"")
                        else:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name + "\"")
                    else:
                        l_status.setText("Headers Sent.")
                        l_switch.setText("<font color='yellow'>Awaiting Connection Request.</font>")
            except:
                pass
        if not window.isVisible():
            close_program()
            sys.exit()
        if sent_header and not is_network and is_goldleaf == True:
            try:
                if is_loading == False:
                    v = (int(cur_progress) / int(end_progress)) * 100
                    progressbar.setValue(v)
                    if is_done:
                        l_nsp.setText("")
                        l_status.setText("<font color='green'>Successfully Installed " + str(total_nsp) + " NSPs!</font>")
                        l_switch.setText("<font color='green'>You may close Fluffy.</font>")
                    else:
                        l_status.setText("Installing " + str(cur_nca_count) + " of " + str(max_nca_count) + " NCAs.")
                        n_rate = round((cur_transfer_rate /1000000),2)
                        if n_rate < 0:
                            n_rate = 0.0
                        l_switch.setText("<font color='green'>Transfer Rate: " + str(n_rate) + "MB/s.</font>")
                        if len(cur_nsp_name) > 13:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name[:13] + "...\"")
                        else:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name + "\"")
                            
                else:
                    l_status.setText("Loading " + str(total_usb_nsp) + " NSPs. Please Wait.")
            except:
                pass
        if sent_header and not is_network and is_goldleaf == False:
            try:
                if is_loading == False:
                    v = (int(cur_progress) / int(end_progress)) * 100
                    progressbar.setValue(v)
                    if is_done:
                        l_nsp.setText("")
                        l_status.setText("<font color='green'>Successfully Installed " + str(total_nsp) + " NSPs!</font>")
                        l_switch.setText("<font color='green'>You may close Fluffy.</font>")
                    else:
                        n_rate = round((cur_transfer_rate /1000000),2)
                        if n_rate < 0:
                            n_rate = 0.0
                        l_status.setText("Installing " + str(cur_nsp_count) + " of " + str(total_nsp) + " NSPs.")
                        l_switch.setText("<font color='green'>Transfer Rate: " + str(n_rate) + "MB/s.</font>")
                        if len(cur_nsp_name) > 13:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name[:13] + "...\"")
                        else:
                            l_nsp.setText("Current NSP: \"" + cur_nsp_name + "\"")
                else:
                    l_status.setText("Loading " + str(total_usb_nsp) + " NSPs. Please Wait.")
            except:
                pass
except Exception as e:
    logging.error(e, exc_info=True)
    exit()
